basis$inner_prods_hLh %*%
basis$neighbor_mat
basis$target_coeffs = Re(eigen(basis$sampler_action)$vectors[,1])
basis$target_coeffs = basis$target_coeffs / sum(basis$target_coeffs)
return(basis)
}
# Chunk 5
target = function(x)(dt(x, df = 5))
simple_sampler = function(points_in){
for(i in 1:8){
points_out = points_in + rnorm(n = prod(dim(points_in)))
#it's a symmetric proposal, so only the target enters this ratio.
accepts = rbinom(size = 1, n = dim(points_out)[2],
prob = pmin(1, target(points_out) / target(points_in)))
points_out[,!accepts] = points_in[,!accepts]
points_in = points_out
}
return(points_out)
}
CHAINLEN = 1e4
x = rep(list(matrix(1, ncol = 1, nrow = 1)), CHAINLEN)
for(i in 2:CHAINLEN){
x[[i]] = simple_sampler(x[[i-1]])
}
x = as.numeric(x)
hist(x, probability = TRUE, breaks = 50)
lines(sort(x), target(sort(x)))
# Chunk 6
basis = prepare_basis(dimension = 1, NUM_BASIS = 30)
plot_1d_basis(basis)
heatmap(basis$inner_prods_hh, Rowv = NA, Colv = NA)
basis = bemc(basis,
sampler = simple_sampler,
dimension = 1,
NUM_SAMPLES = 100)
my_grid = matrix(seq(-5, 5, length.out = 100), ncol = 100)
heatmap(basis$inner_prods_hLh, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(basis$sampler_action, Rowv = NA, Colv = NA, symm = TRUE)
plot(my_grid, target(my_grid))
lines(my_grid, target_density_est(points = my_grid, basis))
basis = prepare_basis(dimension = 1, NUM_BASIS = 30)
plot_1d_basis(basis)
heatmap(basis$inner_prods_hh, Rowv = NA, Colv = NA)
basis = bemc(basis,
sampler = simple_sampler,
dimension = 1,
NUM_SAMPLES = 500)
my_grid = matrix(seq(-5, 5, length.out = 100), ncol = 100)
heatmap(basis$inner_prods_hLh, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(basis$sampler_action, Rowv = NA, Colv = NA, symm = TRUE)
plot(my_grid, target(my_grid))
lines(my_grid, target_density_est(points = my_grid, basis))
basis = prepare_basis(dimension = 1, NUM_BASIS = 30)
plot_1d_basis(basis)
heatmap(basis$inner_prods_hh, Rowv = NA, Colv = NA)
basis = bemc(basis,
sampler = simple_sampler,
dimension = 1,
NUM_SAMPLES = 500)
my_grid = matrix(seq(-5, 5, length.out = 100), ncol = 100)
heatmap(basis$inner_prods_hLh, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(basis$sampler_action, Rowv = NA, Colv = NA, symm = TRUE)
plot(my_grid, target(my_grid))
lines(my_grid, target_density_est(points = my_grid, basis), col = "reb")
basis = prepare_basis(dimension = 1, NUM_BASIS = 30)
plot_1d_basis(basis)
heatmap(basis$inner_prods_hh, Rowv = NA, Colv = NA)
basis = bemc(basis,
sampler = simple_sampler,
dimension = 1,
NUM_SAMPLES = 500)
my_grid = matrix(seq(-5, 5, length.out = 100), ncol = 100)
heatmap(basis$inner_prods_hLh, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(basis$sampler_action, Rowv = NA, Colv = NA, symm = TRUE)
plot(my_grid, target(my_grid), type = "l")
lines(my_grid, target_density_est(points = my_grid, basis), col = "red")
heatmap(basis$inner_prods_hLh, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(basis$sampler_action, Rowv = NA, Colv = NA, symm = TRUE)
basis = prepare_basis(dimension = 1, NUM_BASIS = 50)
plot_1d_basis(basis)
heatmap(basis$inner_prods_hh, Rowv = NA, Colv = NA)
basis = bemc(basis,
sampler = simple_sampler,
dimension = 1,
NUM_SAMPLES = 500)
my_grid = matrix(seq(-5, 5, length.out = 100), ncol = 100)
heatmap(basis$inner_prods_hLh, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(basis$sampler_action, Rowv = NA, Colv = NA, symm = TRUE)
plot(my_grid, target(my_grid), type = "l")
lines(my_grid, target_density_est(points = my_grid, basis), col = "red")
heatmap(basis$inner_prods_hLh, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(basis$sampler_action, Rowv = NA, Colv = NA, symm = TRUE)
plot(my_grid, target(my_grid), type = "l")
lines(my_grid, target_density_est(points = my_grid, basis), col = "red")
plot(my_grid, diag(basis$sampler_action), type = "l")
plot(basis$means, diag(basis$sampler_action), type = "l")
plot(my_grid, target(my_grid), type = "l")
lines(my_grid, target_density_est(points = my_grid, basis), col = "red")
# Chunk 1
rm(list = ls())
# Chunk 2
prepare_basis = function(dimension = 1,
NUM_BASIS = 50,
range = c(-5, 5),
scale = 2,
num_neighbors = 5){
assertthat::assert_that(dimension==1) #Don't have a default initialization yet
default_var = ((range[2] - range[1]) / (scale * NUM_BASIS))^2
basis = list(means       = as.list(seq(range[1], range[2],length.out = NUM_BASIS)),
covariances = as.list(rep(default_var,       length.out = NUM_BASIS)))
basis$range = range
basis$cholesky_factors = lapply(FUN = chol,                           basis$covariances)
basis$inv_sqrt_det =     lapply(FUN = function(M)(1 / prod(diag(M))), basis$cholesky_factors)
basis$precisions =       lapply(FUN = chol2inv,                       basis$cholesky_factors)
basis$inner_prods_hh  = matrix(0, nrow = NUM_BASIS, ncol = NUM_BASIS) #Called C in the writeup
basis$inner_prods_hLh = matrix(0, nrow = NUM_BASIS, ncol = NUM_BASIS) #Called G in the writeup
basis$sampler_action  = matrix(NA, nrow = NUM_BASIS, ncol = NUM_BASIS) #CinvG = MC
basis$neighbor_mat    = matrix(0, nrow = NUM_BASIS, ncol = NUM_BASIS) #Z
basis$target_coeffs = rep(NA, NUM_BASIS)
basis$length = NUM_BASIS
basis$par_dim = dimension
get_inner_prod = function(i, j){
lambda = basis$precisions[[i]] + basis$precisions[[j]]
nu = solve(lambda,
basis$precisions[[i]] %*% basis$means[[i]] +
basis$precisions[[j]] %*% basis$means[[j]])
num = exp(-0.5 * ( - nu * lambda * nu +
t(basis$means[[i]]) %*% basis$precisions[[i]] %*% basis$means[[i]] +
t(basis$means[[j]]) %*% basis$precisions[[j]] %*% basis$means[[j]] ) )
num = num * basis$inv_sqrt_det[[i]] * basis$inv_sqrt_det[[j]]
dnm = sqrt(2*pi)^dimension * sqrt(det(lambda))
return(num / dnm)
}
#Get inner products
for(b_in in 1:NUM_BASIS){
for(b_out in 1:NUM_BASIS){
basis$inner_prods_hh[b_in, b_out] = get_inner_prod(b_in, b_out)
}
}
# We only estimate traffic between nearby basis elements.
# This code finds the nearest neighbors for each element.
basis$neighbors = as.list(rep(0, NUM_BASIS))
for(index in 1:NUM_BASIS){
basis$neighbors[[index]] = order(basis$inner_prods_hh[index, ],
decreasing = TRUE)[1:num_neighbors]
}
#Ensure that neighboring relations are symmetric
for(b_in in 1:NUM_BASIS){
for(b_out in basis$neighbors[[b_in]]){
if(! (b_in %in% basis$neighbors[[b_out]]) ){
basis$neighbors[[b_out]] = c(basis$neighbors[[b_out]], b_in)
}
}
}
for(index in 1:NUM_BASIS){
basis$neighbor_mat[ basis$neighbors[[index]], index ] = 1
}
assertthat::assert_that( all( basis$neighbor_mat == t( basis$neighbor_mat ) ) )
return(basis)
}
# Return a matrix with `num_samples` columns. Each is a draw from
# element `index` of `basis`.
get_samples = function(basis, index, num_samples){
my_chol = basis$cholesky_factors[[index]]
samples = matrix(rnorm(n = num_samples * basis$par_dim), nrow = basis$par_dim)
samples = my_chol %*% samples
for(i in 1:basis$par_dim){
samples[i,] = samples[i,] + basis$means[[index]][i]
}
return(samples)
}
# Accept a matrix with `num_samples` columns.
# At each, evaluate the density of
# element `index` of `basis`.
get_density = function(points, basis, index){
nums = rep(NA, dim(points)[2])
for(j in seq_along(nums)){
points[ ,j] = points[ ,j] - basis$means[[index]]
quadratic_j = t(points[ ,j]) %*% basis$precisions[[index]] %*% points[ ,j]
nums[j] = exp(-0.5 * quadratic_j )
}
inv_dnm = basis$inv_sqrt_det[[index]] * ( (2 * pi) ^ ( -basis$par_dim / 2 ) )
densities = nums * inv_dnm
return(densities)
}
# Accept a matrix with `num_samples` columns.
# At each, evaluate the estimated density of the target.
target_density_est = function(points, basis){
densities = rep(0, dim(points)[2])
for(i in 1:basis$length){
densities = densities +
basis$target_coeffs[[i]] * get_density(points, basis, index = i)
}
return(densities)
}
require(ggplot2)
plot_1d_basis = function(basis){
num_samples = 100
sampled_df = data.frame(xvals = rep(NA, basis$length*num_samples),
yvals = rep(NA, basis$length*num_samples),
index = rep(1:basis$length, each = num_samples))
for(index in 1:basis$length){
abcissae = matrix(sort(get_samples(basis, index, num_samples)), nrow = 1)
densities = get_density(abcissae, basis, index)
sampled_df$xvals[sampled_df$index==index] = abcissae
sampled_df$yvals[sampled_df$index==index] = densities
}
p = ggplot(data = sampled_df) + guides(colour = FALSE) +
geom_line(aes(xvals, yvals, colour = as.factor(index)))
print(p)
}
# Chunk 3
basis = prepare_basis(NUM_BASIS = 10)
plot_1d_basis(basis)
samples = get_samples(basis, index = 1, num_samples = 50000)
densities = get_density(samples, basis, index = 1)
hist(samples, probability = TRUE)
my_order = order(samples)
lines(samples[my_order], densities[my_order])
# Chunk 4
require(MASS)
# sampler: a function taking a vector `points_in` of parameter values
#          and returning a vector of outputs from an MH sampler initialized at points_in.
bemc = function(basis, sampler, dimension = 1, NUM_SAMPLES = 10000){
#Estimate M
samples_before_mh = matrix(0, ncol = NUM_SAMPLES, nrow = dimension)
samples_after_mh = matrix(0, ncol = NUM_SAMPLES, nrow = dimension)
for(b_in in 1:basis$length){
samples_before_mh = get_samples(basis, b_in, num_samples = NUM_SAMPLES)
for(b_out in basis$neighbors[[b_in]]){
samples_after_mh = simple_sampler(points_in = samples_before_mh)
weights = get_density(points = samples_after_mh, basis, b_out)
basis$inner_prods_hLh[b_in, b_out] = mean(weights)
}
}
cinv = ginv(basis$inner_prods_hh)
basis$sampler_action = #Cinv ZGZ#
cinv %*%
basis$neighbor_mat %*%
basis$inner_prods_hLh %*%
basis$neighbor_mat
basis$target_coeffs = Re(eigen(basis$sampler_action)$vectors[,1])
basis$target_coeffs = basis$target_coeffs / sum(basis$target_coeffs)
return(basis)
}
# Chunk 5
target = function(x)(dt(x, df = 5))
simple_sampler = function(points_in){
for(i in 1:20){
points_out = points_in + rnorm(n = prod(dim(points_in)))
#it's a symmetric proposal, so only the target enters this ratio.
accepts = rbinom(size = 1, n = dim(points_out)[2],
prob = pmin(1, target(points_out) / target(points_in)))
points_out[,!accepts] = points_in[,!accepts]
points_in = points_out
}
return(points_out)
}
CHAINLEN = 1e4
x = rep(list(matrix(1, ncol = 1, nrow = 1)), CHAINLEN)
for(i in 2:CHAINLEN){
x[[i]] = simple_sampler(x[[i-1]])
}
x = as.numeric(x)
hist(x, probability = TRUE, breaks = 50)
lines(sort(x), target(sort(x)))
# Chunk 6
basis = prepare_basis(dimension = 1, NUM_BASIS = 50)
plot_1d_basis(basis)
heatmap(basis$inner_prods_hh, Rowv = NA, Colv = NA)
basis = bemc(basis,
sampler = simple_sampler,
dimension = 1,
NUM_SAMPLES = 500)
my_grid = matrix(seq(-5, 5, length.out = 100), ncol = 100)
heatmap(basis$inner_prods_hLh, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(basis$sampler_action, Rowv = NA, Colv = NA, symm = TRUE)
plot(my_grid, target(my_grid), type = "l")
lines(my_grid, target_density_est(points = my_grid, basis), col = "red")
plot(basis$means, diag(basis$sampler_action), type = "l")
plot(my_grid, target(my_grid), type = "l")
lines(my_grid, target_density_est(points = my_grid, basis), col = "red")
basis = prepare_basis(dimension = 1, NUM_BASIS = 30)
plot_1d_basis(basis)
heatmap(basis$inner_prods_hh, Rowv = NA, Colv = NA)
basis = bemc(basis,
sampler = simple_sampler,
dimension = 1,
NUM_SAMPLES = 500)
my_grid = matrix(seq(-5, 5, length.out = 100), ncol = 100)
heatmap(basis$inner_prods_hLh, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(basis$sampler_action, Rowv = NA, Colv = NA, symm = TRUE)
plot(my_grid, target(my_grid), type = "l")
lines(my_grid, target_density_est(points = my_grid, basis), col = "red")
plot(basis$means, diag(basis$sampler_action), type = "l")
plot(my_grid, target(my_grid), type = "l")
lines(my_grid, target_density_est(points = my_grid, basis), col = "red")
basis = prepare_basis(dimension = 1, NUM_BASIS = 30)
plot_1d_basis(basis)
heatmap(basis$inner_prods_hh, Rowv = NA, Colv = NA)
basis = bemc(basis,
sampler = simple_sampler,
dimension = 1,
NUM_SAMPLES = 250)
my_grid = matrix(seq(-5, 5, length.out = 100), ncol = 100)
heatmap(basis$inner_prods_hLh, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(basis$sampler_action, Rowv = NA, Colv = NA, symm = TRUE)
plot(basis$means, diag(basis$sampler_action), type = "l")
plot(my_grid, target(my_grid), type = "l")
lines(my_grid, target_density_est(points = my_grid, basis), col = "red")
target = function(x)(dt(x, df = 5))
simple_sampler = function(points_in){
for(i in 1:8){
points_out = points_in + rnorm(n = prod(dim(points_in)))
#it's a symmetric proposal, so only the target enters this ratio.
accepts = rbinom(size = 1, n = dim(points_out)[2],
prob = pmin(1, target(points_out) / target(points_in)))
points_out[,!accepts] = points_in[,!accepts]
points_in = points_out
}
return(points_out)
}
CHAINLEN = 1e4
x = rep(list(matrix(1, ncol = 1, nrow = 1)), CHAINLEN)
for(i in 2:CHAINLEN){
x[[i]] = simple_sampler(x[[i-1]])
}
x = as.numeric(x)
hist(x, probability = TRUE, breaks = 50)
lines(sort(x), target(sort(x)))
# Chunk 1
rm(list = ls())
# Chunk 2
prepare_basis = function(dimension = 1,
NUM_BASIS = 50,
range = c(-5, 5),
scale = 2,
num_neighbors = 5){
assertthat::assert_that(dimension==1) #Don't have a default initialization yet
default_var = ((range[2] - range[1]) / (scale * NUM_BASIS))^2
basis = list(means       = as.list(seq(range[1], range[2],length.out = NUM_BASIS)),
covariances = as.list(rep(default_var,       length.out = NUM_BASIS)))
basis$range = range
basis$cholesky_factors = lapply(FUN = chol,                           basis$covariances)
basis$inv_sqrt_det =     lapply(FUN = function(M)(1 / prod(diag(M))), basis$cholesky_factors)
basis$precisions =       lapply(FUN = chol2inv,                       basis$cholesky_factors)
basis$inner_prods_hh  = matrix(0, nrow = NUM_BASIS, ncol = NUM_BASIS) #Called C in the writeup
basis$inner_prods_hLh = matrix(0, nrow = NUM_BASIS, ncol = NUM_BASIS) #Called G in the writeup
basis$sampler_action  = matrix(NA, nrow = NUM_BASIS, ncol = NUM_BASIS) #CinvG = MC
basis$neighbor_mat    = matrix(0, nrow = NUM_BASIS, ncol = NUM_BASIS) #Z
basis$target_coeffs = rep(NA, NUM_BASIS)
basis$length = NUM_BASIS
basis$par_dim = dimension
get_inner_prod = function(i, j){
lambda = basis$precisions[[i]] + basis$precisions[[j]]
nu = solve(lambda,
basis$precisions[[i]] %*% basis$means[[i]] +
basis$precisions[[j]] %*% basis$means[[j]])
num = exp(-0.5 * ( - nu * lambda * nu +
t(basis$means[[i]]) %*% basis$precisions[[i]] %*% basis$means[[i]] +
t(basis$means[[j]]) %*% basis$precisions[[j]] %*% basis$means[[j]] ) )
num = num * basis$inv_sqrt_det[[i]] * basis$inv_sqrt_det[[j]]
dnm = sqrt(2*pi)^dimension * sqrt(det(lambda))
return(num / dnm)
}
#Get inner products
for(b_in in 1:NUM_BASIS){
for(b_out in 1:NUM_BASIS){
basis$inner_prods_hh[b_in, b_out] = get_inner_prod(b_in, b_out)
}
}
# We only estimate traffic between nearby basis elements.
# This code finds the nearest neighbors for each element.
basis$neighbors = as.list(rep(0, NUM_BASIS))
for(index in 1:NUM_BASIS){
basis$neighbors[[index]] = order(basis$inner_prods_hh[index, ],
decreasing = TRUE)[1:num_neighbors]
}
#Ensure that neighboring relations are symmetric
for(b_in in 1:NUM_BASIS){
for(b_out in basis$neighbors[[b_in]]){
if(! (b_in %in% basis$neighbors[[b_out]]) ){
basis$neighbors[[b_out]] = c(basis$neighbors[[b_out]], b_in)
}
}
}
for(index in 1:NUM_BASIS){
basis$neighbor_mat[ basis$neighbors[[index]], index ] = 1
}
assertthat::assert_that( all( basis$neighbor_mat == t( basis$neighbor_mat ) ) )
return(basis)
}
# Return a matrix with `num_samples` columns. Each is a draw from
# element `index` of `basis`.
get_samples = function(basis, index, num_samples){
my_chol = basis$cholesky_factors[[index]]
samples = matrix(rnorm(n = num_samples * basis$par_dim), nrow = basis$par_dim)
samples = my_chol %*% samples
for(i in 1:basis$par_dim){
samples[i,] = samples[i,] + basis$means[[index]][i]
}
return(samples)
}
# Accept a matrix with `num_samples` columns.
# At each, evaluate the density of
# element `index` of `basis`.
get_density = function(points, basis, index){
nums = rep(NA, dim(points)[2])
for(j in seq_along(nums)){
points[ ,j] = points[ ,j] - basis$means[[index]]
quadratic_j = t(points[ ,j]) %*% basis$precisions[[index]] %*% points[ ,j]
nums[j] = exp(-0.5 * quadratic_j )
}
inv_dnm = basis$inv_sqrt_det[[index]] * ( (2 * pi) ^ ( -basis$par_dim / 2 ) )
densities = nums * inv_dnm
return(densities)
}
# Accept a matrix with `num_samples` columns.
# At each, evaluate the estimated density of the target.
target_density_est = function(points, basis){
densities = rep(0, dim(points)[2])
for(i in 1:basis$length){
densities = densities +
basis$target_coeffs[[i]] * get_density(points, basis, index = i)
}
return(densities)
}
require(ggplot2)
plot_1d_basis = function(basis){
num_samples = 100
sampled_df = data.frame(xvals = rep(NA, basis$length*num_samples),
yvals = rep(NA, basis$length*num_samples),
index = rep(1:basis$length, each = num_samples))
for(index in 1:basis$length){
abcissae = matrix(sort(get_samples(basis, index, num_samples)), nrow = 1)
densities = get_density(abcissae, basis, index)
sampled_df$xvals[sampled_df$index==index] = abcissae
sampled_df$yvals[sampled_df$index==index] = densities
}
p = ggplot(data = sampled_df) + guides(colour = FALSE) +
geom_line(aes(xvals, yvals, colour = as.factor(index)))
print(p)
}
# Chunk 3
basis = prepare_basis(NUM_BASIS = 10)
plot_1d_basis(basis)
samples = get_samples(basis, index = 1, num_samples = 50000)
densities = get_density(samples, basis, index = 1)
hist(samples, probability = TRUE)
my_order = order(samples)
lines(samples[my_order], densities[my_order])
# Chunk 4
require(MASS)
# sampler: a function taking a vector `points_in` of parameter values
#          and returning a vector of outputs from an MH sampler initialized at points_in.
bemc = function(basis, sampler, dimension = 1, NUM_SAMPLES = 10000){
#Estimate M
samples_before_mh = matrix(0, ncol = NUM_SAMPLES, nrow = dimension)
samples_after_mh = matrix(0, ncol = NUM_SAMPLES, nrow = dimension)
for(b_in in 1:basis$length){
samples_before_mh = get_samples(basis, b_in, num_samples = NUM_SAMPLES)
for(b_out in basis$neighbors[[b_in]]){
samples_after_mh = simple_sampler(points_in = samples_before_mh)
weights = get_density(points = samples_after_mh, basis, b_out)
basis$inner_prods_hLh[b_in, b_out] = mean(weights)
}
}
cinv = ginv(basis$inner_prods_hh)
basis$sampler_action = #Cinv ZGZ#
cinv %*%
basis$neighbor_mat %*%
basis$inner_prods_hLh %*%
basis$neighbor_mat
basis$target_coeffs = Re(eigen(basis$sampler_action)$vectors[,1])
basis$target_coeffs = basis$target_coeffs / sum(basis$target_coeffs)
return(basis)
}
# Chunk 5
target = function(x)(dt(x, df = 5))
simple_sampler = function(points_in){
for(i in 1:8){
points_out = points_in + rnorm(n = prod(dim(points_in)))
#it's a symmetric proposal, so only the target enters this ratio.
accepts = rbinom(size = 1, n = dim(points_out)[2],
prob = pmin(1, target(points_out) / target(points_in)))
points_out[,!accepts] = points_in[,!accepts]
points_in = points_out
}
return(points_out)
}
CHAINLEN = 1e4
x = rep(list(matrix(1, ncol = 1, nrow = 1)), CHAINLEN)
for(i in 2:CHAINLEN){
x[[i]] = simple_sampler(x[[i-1]])
}
x = as.numeric(x)
hist(x, probability = TRUE, breaks = 50)
lines(sort(x), target(sort(x)))
# Chunk 6
basis = prepare_basis(dimension = 1, NUM_BASIS = 30)
plot_1d_basis(basis)
heatmap(basis$inner_prods_hh, Rowv = NA, Colv = NA)
basis = bemc(basis,
sampler = simple_sampler,
dimension = 1,
NUM_SAMPLES = 250)
my_grid = matrix(seq(-5, 5, length.out = 100), ncol = 100)
heatmap(basis$inner_prods_hLh, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(basis$sampler_action, Rowv = NA, Colv = NA, symm = TRUE)
plot(basis$means, diag(basis$sampler_action), type = "l")
plot(my_grid, target(my_grid), type = "l")
lines(my_grid, target_density_est(points = my_grid, basis), col = "red")
